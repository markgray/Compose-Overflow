/*
 * Copyright 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.example.jetcaster.core.data.database.model

import androidx.compose.runtime.Immutable
import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.Index
import androidx.room.PrimaryKey

/**
 * This is the data class that defines our `categories` table in the database, it is created from the
 * RSS feed. The fields are self-explanatory, and the contents today are: "Society & Culture",
 * "Arts", "News", "Health & Fitness", "Comedy", "True Crime", "TV & Film", "Technology", "Science",
 * "Sports", and "Business". The meanings of the anotations are:
 *  1. `@Entity`: This annotation marks the Category class as a Room entity, which represents a table
 *  in our database.
 *    - tableName: This parameter specifies the name of the table in the database.
 *    - indices: This parameter is used to define indices for the table.
 *    - Index("name", unique = true): This creates an index on the "name" column.
 *    - "name": This is the name of the column to be indexed.
 *    - unique = true: This is the crucial part. Setting unique to true enforces that all values in
 *    the "name" column must be unique. If you try to insert a row with a "name" that already exists,
 *    Room will throw an exception.
 *  2. `@PrimaryKey`: This annotation marks the id field as the primary key for the table.
 *    - autoGenerate: This parameter is set to `true`, which means that Room will automatically
 *    generate the unique id.
 *  3. `@ColumnInfo(name = "id")`: This annotation is used to specify the name of the column in the
 *  table.
 *
 * The data class is immutable, which means that its contents cannot be changed after it is created.
 * It is a row in the table.
 */
@Entity(
    tableName = "categories",
    indices = [
        Index("name", unique = true)
    ]
)
@Immutable
data class Category(
    /**
     * This is the Primary Key for the table, and it is autogenerated by Room.
     */
    @PrimaryKey(autoGenerate = true) @ColumnInfo(name = "id") val id: Long = 0,
    /**
     * This is the name of the category.
     */
    @ColumnInfo(name = "name") val name: String
)
